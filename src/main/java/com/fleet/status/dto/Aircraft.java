package com.fleet.status.dto;
import jakarta.persistence.*;
import lombok.AccessLevel;
import lombok.Data;
import lombok.ToString;

import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import lombok.Getter;
import org.springframework.format.annotation.DateTimeFormat;

@Entity
@Data
@Table(name = "TAircraft")
public class Aircraft {

    @Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    @Column(name = "intAircraftId")
    private Long aircraftId;

    @Column(name = "strTailNumber")
    private String tailNumber;
    @Column(name = "strNextUpdate")
    @Getter(AccessLevel.NONE)
    private String nextUpdate;
    @Column(name = "strRemark")
    private String remark;
    @Column(name = "blnBackInService")
    private Integer backInService;
    @Column(name = "dtmStartTime")
    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
    private Instant startTime;
    @Column(name = "dtmEndTime")
    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
    private Instant endTime;

    @ManyToOne
    @JoinColumn(name = "intCarrierId", referencedColumnName = "intCarrierId")
    private Carrier carrier;

    @ManyToMany
    @ToString.Exclude //avoid stackoverflow error when use toString method generated by @Data, they print each other between many to many
    @JoinTable(
            name = "TAircraft_Reason",
            joinColumns = @JoinColumn(name = "intAircraftId"),
            inverseJoinColumns = @JoinColumn(name = "intReasonId")
    )
    private List<Reason> reason;

    @Transient
    private String reasonString;

    public String getNextUpdate() {
        // Preserve old formatting of nextUpdate
        if (nextUpdate != null) {
            return nextUpdate.substring(10, 16) + "z";
        }
        return null;
    }

    public String getDownTime(){
        if (getEndTime() == null || getStartTime() == null) {
            return "Down time is not available";
        }
        Duration downtime = Duration.between(startTime, endTime);
        return "Down Time: " + downtime.toDaysPart() + "d " + downtime.toHoursPart() + "h " + downtime.toMinutesPart() + "m";
    }
}
